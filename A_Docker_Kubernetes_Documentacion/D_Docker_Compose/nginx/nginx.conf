# nginx.conf

# Global settings
# Aquí comienzan las configuraciones globales que afectan a todo el servidor nginx.

user  nginx;  
# Define el usuario bajo el cual se ejecutarán los procesos de nginx. 
# En este caso, se ejecutan bajo el usuario 'nginx', que es el predeterminado en la mayoría de las instalaciones de Nginx.

worker_processes  1;  
# Define la cantidad de procesos 'worker' que nginx usará para manejar conexiones. 
# Generalmente, se ajusta al número de núcleos de CPU. En este caso, está configurado en 1.

error_log  /var/log/nginx/error.log warn;  
# Define la ubicación del archivo donde se registrarán los errores del servidor Nginx.
# El nivel de registro está configurado en 'warn', lo que significa que registrará advertencias y errores.

pid  /var/run/nginx.pid;  
# Define la ubicación donde se almacenará el archivo PID (Process ID) que identifica el proceso principal de nginx.
# Este archivo es utilizado por nginx para saber qué proceso detener al reiniciar o detener el servidor.

events {
    worker_connections  1024;  
    # Define el número máximo de conexiones simultáneas que un 'worker' puede manejar. 
    # Aquí está configurado para permitir hasta 1024 conexiones simultáneas por proceso.
}

# Bloque http
# El bloque 'http' contiene configuraciones relacionadas con la manipulación de solicitudes HTTP.
http {

    include  /etc/nginx/mime.types;  
    # Incluye el archivo 'mime.types', que define los tipos de contenido que Nginx puede servir. 
    # Esto permite a Nginx reconocer y servir archivos con diferentes extensiones, como imágenes, CSS, JavaScript, etc.

    default_type  application/octet-stream;  
    # Especifica el tipo de contenido predeterminado que Nginx debe usar si no puede determinar el tipo de archivo. 
    # En este caso, si no se conoce el tipo, se utilizará 'application/octet-stream', que es un tipo de archivo binario genérico.

    # Definición del formato del log de acceso
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';  
    # Define el formato del log de acceso. 
    # Cada solicitud que Nginx recibe se registrará en este formato, que incluye información como:
    # - $remote_addr: Dirección IP del cliente.
    # - $remote_user: Usuario remoto (si hay autenticación).
    # - $time_local: Hora local de la solicitud.
    # - $request: La solicitud HTTP completa (método, URL, versión).
    # - $status: El código de estado HTTP (como 200, 404, etc.).
    # - $body_bytes_sent: El tamaño del cuerpo de la respuesta.
    # - $http_referer: La URL desde la que el cliente llegó.
    # - $http_user_agent: El agente de usuario (navegador, bot, etc.).
    # - $http_x_forwarded_for: Información de IP en proxys.

    access_log  /var/log/nginx/access.log  main;  
    # Define la ubicación donde se almacenarán los logs de acceso y el formato (anteriormente definido como 'main').

    sendfile  on;  
    # Activa 'sendfile', que es una función para enviar archivos directamente desde el disco al socket sin pasar por el espacio de usuario.
    # Esto mejora la eficiencia del servidor al manejar archivos.

    keepalive_timeout  65;  
    # Define el tiempo (en segundos) que Nginx mantendrá una conexión abierta después de que se haya procesado una solicitud.
    # Aquí está configurado a 65 segundos.
    
    # Bloque del servidor
    # A continuación, se define un bloque de 'server', que gestiona las solicitudes HTTP entrantes.

    server {
        listen 80;  
        # Configura el servidor para escuchar en el puerto 80, que es el puerto predeterminado para HTTP.

        root /usr/share/nginx/html;  
        # Define el directorio raíz donde se buscarán los archivos que se servirán. 
        # En este caso, se especifica que los archivos están en '/usr/share/nginx/html'.

        index index.html index.php;  
        # Define los archivos que Nginx buscará por defecto cuando un usuario acceda a la raíz del servidor. 
        # Aquí se intenta servir primero 'index.html' y luego 'index.php'.

        location / {
            try_files $uri $uri/ =404;  
            # Este bloque maneja las solicitudes a la raíz ('/') del sitio. 
            # 'try_files' intenta servir el archivo solicitado ($uri), si no lo encuentra, intenta servir el directorio ($uri/), 
            # y si no lo encuentra, devuelve un error 404.
        }

        location ~ \.php$ {
            fastcgi_pass php_fpm:9000;  
            # Este bloque maneja las solicitudes a archivos PHP. 
            # Se especifica que las solicitudes deben ser enviadas al servicio 'php_fpm' en el puerto 9000 para su procesamiento.

            fastcgi_index index.php;  
            # Define que 'index.php' será el archivo por defecto para solicitudes a directorios cuando se utilice FastCGI.

            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;  
            # Establece el parámetro 'SCRIPT_FILENAME', que especifica la ruta completa del archivo PHP que se debe ejecutar.
            # '$document_root' se refiere al valor de la directiva 'root' definida anteriormente, y 
            # '$fastcgi_script_name' se refiere al archivo solicitado.

            include fastcgi_params;  
            # Incluye los parámetros estándar de FastCGI, que son necesarios para procesar las solicitudes PHP correctamente.
        }
    }
}
